@page "/login"
@using IntegrationProject.Authentication;
@inject UserService userService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-0border-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="model.Username" class="form-control" placeholder="Username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
    private Model model = new Model();

    private async Task Authenticate()
    {
        var user = userService.GetByUserName(model.Username!);
        if(user == null || user.Password != model.Password)
        {
            //hacer algo
            return;
        }


        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Username = user.Username,
                Role = user.Role
            });
        navigationManager.NavigateTo("/", true);
    }
    

}

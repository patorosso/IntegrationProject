@page "/userlist"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject UserState userState
@using IntegrationProject.Data.Models;
@using IntegrationProject.States

<AuthorizeView>
    <div class="col">
        <a href="Identity/Account/Register"
           class="btn btn-primary btn-lg" 
        style="text-decoration: none;margin-bottom:20px">
        Register a new user</a>
    </div>
</AuthorizeView>
 

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else if (users.Count() == 1) //solo esta el mismo usuario
{
    <p><em>No other users to display.</em></p>
}
else
{
<AuthorizeView>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Role</th>
                    <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users.Where(u => u.Username != @context.User.Identity?.Name)) //excluyo al usuario actual
            {
                <tr>
                    <td><div style="margin-top:7px">@user.Username</div></td>
                    <td><div style="margin-top:7px">@user.Role</div></td>
                        <td>
                            <button class="btn btn-success" @onclick="() => EditUser(user)">Change Role</button>
                            <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                        </td>
                </tr>
            }
        </tbody>
    </table>
</AuthorizeView>
}

@if (userState.ShowingEditDialog)
{
    <RoleForm UserModel="userState.UserModel"
               OnCancel="userState.CancelConfigureUserDialog"
               OnConfirm="userState.ConfirmEditUserDialog"
               />
}

@if (userState.ShowingDeleteDialog)
{
    <ConfirmationModal Item="userState.UserModel"
                       OnCancel="userState.CancelConfigureUserDialog"
                       OnConfirm="userState.ConfirmDeleteUserDialog"
                       Message="Are you sure you want to delete this user?" />
}


@code {
    private List<UserModel>? users;
    
    protected override async Task OnInitializedAsync()
    {
        userState.OnConfirmConfigureUserDialog += HandleConfigureUserDialogConfirm;
        await RefreshUsers();
    }
    
    private async Task RefreshUsers()
    {
        users = await HttpClient.GetFromJsonAsync<List<UserModel>>($"{NavigationManager.BaseUri}users");
        StateHasChanged();
    }

    private async Task HandleConfigureUserDialogConfirm()
    {
        await RefreshUsers();
    }

    private void EditUser(UserModel userModel)
    {
        userState.ShowConfigureUserDialog(userModel, "Edit");
    }

    private void DeleteUser(UserModel userModel)
    {
        userState.ShowConfigureUserDialog(userModel, "Delete");
    }
    
    
}

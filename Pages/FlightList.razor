@page "/flightlist"
@using IntegrationProject.Data.Models;
@using IntegrationProject.States;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject FlightState flightState


<PageTitle>Flight List</PageTitle>
<div class="row">
    <div class="col">
        <div>
            <h1>Flight list</h1>
            <p>Listing flights from all around the world.</p>
        </div>
    </div>
    <AuthorizeView>
    <div class="col">
        <button class="btn btn-primary btn-lg  float-xl-end" @onclick="CreateFlight">Add new flight</button>
    </div>
    </AuthorizeView>
</div>


@if (flights == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Flight number</th>
                <th>Airline</th>
                <th>Status</th>
                <th>Departure</th>
                <AuthorizeView>
                <th>Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in flights)
            {
                <tr>
                    <td><div style="margin-top:7px">@flight.FlightNumber</div></td>
                    <td><div style="margin-top:7px">@flight.Airline?.Name</div></td>
                    <td><div style="margin-top:7px">@(flight.Delayed == false ? "On time" : "Delayed")</div></td>
                    <td><div style="margin-top:7px">@flight.Takeoff</div></td>
                    <AuthorizeView>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditFlight(flight)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteFlight(flight)">Delete</button>
                    </td>
                    </AuthorizeView>
                </tr>

            }
        </tbody>
    </table>
}

@if (flightState.ShowingEditDialog)
{
    <FormModal Flight="flightState.ConfiguringFlight"
    OnCancel="flightState.CancelConfigureFlightDialog"
    OnConfirm="flightState.ConfirmEditFlightDialog"
    ModalType="Edit"
    />
}

@if (flightState.ShowingPostDialog)
{
    <FormModal Flight="flightState.ConfiguringFlight"
    OnCancel="flightState.CancelConfigureFlightDialog"
    OnConfirm="flightState.ConfirmPostFlightDialog"
    ModalType="Create" />
}

@if (flightState.ShowingDeleteDialog)
{
    <ConfirmationModal Flight="flightState.ConfiguringFlight"
    OnCancel="flightState.CancelConfigureFlightDialog"
    OnConfirm="flightState.ConfirmDeleteFlightDialog"
    Message="Are you sure you want to delete this flight?" />
}


@code {

    private List<Flight>? flights;

    protected override async Task OnInitializedAsync()
    {
        flightState.OnConfirmConfigureFlightDialog += HandleConfigureFlightDialogConfirm;
        await RefreshFlights();
    }

    private async Task RefreshFlights()
    {
        flights = await HttpClient.GetFromJsonAsync<List<Flight>>($"{NavigationManager.BaseUri}flights");
        StateHasChanged();
    }

    private void EditFlight(Flight flight)
    {
        flightState.ShowConfigureFlightDialog(flight,"Edit");
    }

    private async Task HandleConfigureFlightDialogConfirm()
    {
        await RefreshFlights();
    }

    private void CreateFlight()
    {
        Flight flight = new();
        flightState.ShowConfigureFlightDialog(flight, "Post");
    }

    private void DeleteFlight(Flight flight)
    {
        flightState.ShowConfigureFlightDialog(flight, "Delete");
    }

    
}